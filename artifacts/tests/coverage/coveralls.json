{"service_name":"travis-ci","service_job_id":"11118632","git":{"branch":"(detached from 624e2aa)","head":{"id":"624e2aa42861c7f857d2b246b821ff06cb09e22c","author_name":"James Harris","author_email":"james.harris@icecave.com.au","committer_name":"James Harris","committer_email":"james.harris@icecave.com.au","message":"Merge branch 'release\/0.5.0' into develop"},"remotes":[{"name":"origin","url":"git:\/\/github.com\/IcecaveStudios\/woodhouse.git"}]},"run_at":"2013-09-08 12:06:15 +0000","source_files":[{"name":"Icecave\/Woodhouse\/BuildStatus\/BuildStatus.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus;\n\nuse Eloquent\\Enumeration\\Enumeration;\n\nclass BuildStatus extends Enumeration\n{\n    const PASSING = 'passing';\n    const FAILING = 'failing';\n    const PENDING = 'pending';\n    const UNKNOWN = 'unknown';\n    const ERROR   = 'error';\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/Readers\/CommandLineReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus\\Readers;\n\nuse Icecave\\Woodhouse\\BuildStatus\\BuildStatus;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusReaderInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nclass CommandLineReader implements StatusReaderInterface\n{\n    \/**\n     * @param string $buildStatus\n     *\/\n    public function __construct($buildStatus)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->buildStatus = $buildStatus;\n    }\n\n    \/**\n     * @return BuildStatus\n     *\/\n    public function readStatus()\n    {\n        $this->typeCheck->readStatus(func_get_args());\n\n        return BuildStatus::instanceByValue($this->buildStatus);\n    }\n\n    private $typeCheck;\n    private $buildStatus;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,1,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/Readers\/JUnitReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus\\Readers;\n\nuse Exception;\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\BuildStatus\\BuildStatus;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusReaderInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\n\nclass JUnitReader implements StatusReaderInterface\n{\n    \/**\n     * @param string        $reportPath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($reportPath, Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->reportPath = $reportPath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return BuildStatus\n     *\/\n    public function readStatus()\n    {\n        $this->typeCheck->readStatus(func_get_args());\n\n        try {\n            $xml = $this->isolator->simplexml_load_file($this->reportPath);\n        } catch (Exception $e) {\n            throw new RuntimeException('Unable to parse JUnit test report.', 0, $e);\n        }\n\n        foreach ($xml as $suite) {\n            if ($suite['failures'] > 0 || $suite['errors'] > 0) {\n                return BuildStatus::FAILING();\n            }\n        }\n\n        return BuildStatus::PASSING();\n    }\n\n    private $typeCheck;\n    private $reportPath;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,4,4,4,null,null,null,null,null,null,4,null,null,4,4,1,null,null,3,3,2,null,1,null,1,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/Readers\/PhpUnitJsonReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus\\Readers;\n\nuse Icecave\\Collections\\Vector;\nuse Icecave\\Duct\\Exception\\SyntaxExceptionInterface;\nuse Icecave\\Duct\\Parser;\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\BuildStatus\\BuildStatus;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusReaderInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\n\nclass PhpUnitJsonReader implements StatusReaderInterface\n{\n    \/**\n     * @param string        $reportPath\n     * @param Parser|null   $parser\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($reportPath, Parser $parser = null, Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $parser) {\n            $parser = new Parser;\n        }\n\n        $this->reportPath = $reportPath;\n        $this->parser = $parser;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return BuildStatus\n     *\/\n    public function readStatus()\n    {\n        $this->typeCheck->readStatus(func_get_args());\n\n        $fp = $this->isolator->fopen($this->reportPath, 'r');\n\n        $this->parser->reset();\n\n        try {\n            while (!$this->isolator->feof($fp)) {\n                $this->parser->feed(\n                    $this->isolator->fread($fp, 1024)\n                );\n\n                if ($buildStatus = $this->checkResults($this->parser->values())) {\n                    return $buildStatus;\n                }\n            }\n            $this->parser->finalize();\n        } catch (SyntaxExceptionInterface $e) {\n            throw new RuntimeException('Unable to parse PHPUnit test report.', 0, $e);\n        }\n\n        return BuildStatus::PASSING();\n    }\n\n    \/**\n     * @param Vector $results\n     *\n     * @return BuildStatus|null\n     *\/\n    protected function checkResults(Vector $results)\n    {\n        $this->typeCheck->checkResults(func_get_args());\n\n        foreach ($results as $result) {\n            if (isset($result->status) && $result->status !== \"pass\") {\n                return BuildStatus::FAILING();\n            }\n        }\n\n        return null;\n    }\n\n    private $typeCheck;\n    private $reportPath;\n    private $parser;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,4,4,4,null,4,4,4,4,null,null,null,null,null,null,4,null,4,null,4,null,null,4,4,4,4,null,3,2,null,1,1,2,1,null,null,1,null,null,null,null,null,null,null,null,null,3,null,3,3,2,null,1,null,1,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/Readers\/TapReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus\\Readers;\n\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\BuildStatus\\BuildStatus;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusReaderInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\n\nclass TapReader implements StatusReaderInterface\n{\n    \/**\n     * @param string        $reportPath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($reportPath, Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->reportPath = $reportPath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return BuildStatus\n     *\/\n    public function readStatus()\n    {\n        $this->typeCheck->readStatus(func_get_args());\n\n        $content = $this->isolator->file_get_contents($this->reportPath);\n\n        if (preg_match('\/^not ok\/m', $content)) {\n            return BuildStatus::FAILING();\n        } elseif (preg_match('\/^ok\/m', $content)) {\n            return BuildStatus::PASSING();\n        }\n\n        throw new RuntimeException('Unable to parse TAP test report.');\n    }\n\n    private $typeCheck;\n    private $reportPath;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,3,3,3,null,null,null,null,null,null,3,null,3,null,3,1,2,1,null,null,1,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/StatusImageSelector.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nclass StatusImageSelector\n{\n    public function __construct()\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n    }\n\n    \/**\n     * @param BuildStatus $status The build status.\n     *\n     * @return string The filename of the image to use.\n     *\/\n    public function imageFilename(BuildStatus $status)\n    {\n        $this->typeCheck->imageFilename(func_get_args());\n\n        return sprintf('build-status-%s.png', $status->value());\n    }\n\n    private $typeCheck;\n    private $increments;\n}","coverage":[null,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/StatusReaderFactory.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus;\n\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\BuildStatus\\Readers\\CommandLineReader;\nuse Icecave\\Woodhouse\\BuildStatus\\Readers\\JUnitReader;\nuse Icecave\\Woodhouse\\BuildStatus\\Readers\\PhpUnitJsonReader;\nuse Icecave\\Woodhouse\\BuildStatus\\Readers\\TapReader;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse InvalidArgumentException;\n\nclass StatusReaderFactory\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return array<string>\n     *\/\n    public function supportedTypes()\n    {\n        $this->typeCheck->supportedTypes(func_get_args());\n\n        return array(\n            'junit',\n            'phpunit',\n            'result',\n            'tap',\n        );\n    }\n\n    \/**\n     * @param string $type\n     * @param string $argument\n     *\n     * @return StatusReaderInterface\n     *\/\n    public function create($type, $argument)\n    {\n        $this->typeCheck->create(func_get_args());\n\n        switch ($type) {\n            case 'junit':\n                return new JUnitReader($argument, $this->isolator);\n            case 'phpunit':\n                return new PhpUnitJsonReader($argument, null, $this->isolator);\n            case 'result':\n                return new CommandLineReader($argument);\n            case 'tap':\n                return new TapReader($argument, $this->isolator);\n        }\n\n        throw new InvalidArgumentException('Unknown reader type: \"' . $type . '\".');\n    }\n\n    private $typeCheck;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,null,null,null,null,null,null,1,null,null,1,1,1,1,1,null,null,null,null,null,null,null,null,null,null,5,null,null,5,1,4,1,3,1,2,1,null,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/BuildStatus\/StatusReaderInterface.php","source":"<?php\nnamespace Icecave\\Woodhouse\\BuildStatus;\n\ninterface StatusReaderInterface\n{\n    \/**\n     * @return BuildStatus\n     *\/\n    public function readStatus();\n}","coverage":[null,null,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Application.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @param string $vendorPath The path to the composer vendor folder.\n     *\/\n    public function __construct($vendorPath)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->vendorPath = $vendorPath;\n\n        parent::__construct('Woodhouse', '0.5.0');\n\n        $this->getHelperSet()->set(new Helper\\HiddenInputHelper);\n        $this->add(new Command\\GitHub\\CreateAuthorizationCommand);\n        $this->add(new Command\\GitHub\\DeleteAuthorizationCommand);\n        $this->add(new Command\\GitHub\\ListAuthorizationsCommand);\n        $this->add(new Command\\PublishCommand);\n    }\n\n    public function vendorPath()\n    {\n        $this->typeCheck->vendorPath(func_get_args());\n\n        return $this->vendorPath;\n    }\n\n    private $typeCheck;\n    private $vendorPath;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,4,null,4,null,4,4,4,4,4,4,null,null,null,1,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Command\/GitHub\/AbstractGitHubCommand.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Command\\GitHub;\n\nuse Icecave\\Woodhouse\\GitHub\\GitHubClientFactory;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse stdClass;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nabstract class AbstractGitHubCommand extends Command\n{\n    const DEFAULT_AUTHORIZATION_NAME = 'Woodhouse';\n    const DEFAULT_AUTHORIZATION_URL = 'https:\/\/github.com\/IcecaveStudios\/woodhouse';\n\n    \/**\n     * @param GitHubClientFactory|null $clientFactory\n     *\/\n    public function __construct(GitHubClientFactory $clientFactory = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $clientFactory) {\n            $clientFactory = new GitHubClientFactory;\n        }\n        $this->clientFactory = $clientFactory;\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return GitHubClientFactory\n     *\/\n    public function clientFactory()\n    {\n        $this->typeCheck->clientFactory(func_get_args());\n\n        return $this->clientFactory;\n    }\n\n    \/**\n     * @param Application|null $application\n     *\/\n    public function setApplication(Application $application = null)\n    {\n        $this->typeCheck->setApplication(func_get_args());\n\n        parent::setApplication($application);\n\n        if ($application) {\n            $this->clientFactory->setUserAgent(\n                $application->getName() . '\/' . $application->getVersion()\n            );\n        }\n    }\n\n    protected function configure()\n    {\n        $this->typeCheck->configure(func_get_args());\n\n        $this->addOption(\n            'username',\n            'u',\n            InputOption::VALUE_REQUIRED,\n            'A GitHub username to use for API authentication.'\n        );\n        $this->addOption(\n            'password',\n            'p',\n            InputOption::VALUE_REQUIRED,\n            'A GitHub password to use for API authentication.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return Icecave\\Woodhouse\\GitHub\\GitHubClient;\n     *\/\n    protected function createClient(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->createClient(func_get_args());\n\n        list($username, $password) = $this->credentials($input, $output);\n        $client = $this->clientFactory()->create($username, $password);\n\n        return $client;\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return tuple<string,string>\n     *\/\n    protected function credentials(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->credentials(func_get_args());\n\n        $username = $input->getOption('username');\n        $password = $input->getOption('password');\n        if ($input->isInteractive()) {\n            if (null === $username) {\n                $username = $this->getHelperSet()->get('dialog')->ask($output, 'Username: ');\n            }\n            if (null === $password) {\n                $password = $this->getHelperSet()->get('hidden-input')->askHiddenResponse($output, 'Password: ');\n            }\n        }\n\n        return array($username, $password);\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param array<stdClass> $authorizations\n     *\/\n    protected function outputAuthorizations(OutputInterface $output, array $authorizations)\n    {\n        $this->typeCheck->outputAuthorizations(func_get_args());\n\n        foreach ($authorizations as $authorization) {\n            $this->outputAuthorization($output, $authorization);\n        }\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param stdClass        $authorization\n     *\/\n    protected function outputAuthorization(OutputInterface $output, stdClass $authorization)\n    {\n        $this->typeCheck->outputAuthorization(func_get_args());\n\n        $message = sprintf(\n            '%d: %s <info>%s [%s]<\/info>',\n            $authorization->id,\n            $authorization->token,\n            $authorization->app->name,\n            implode(', ', $authorization->scopes)\n        );\n        if (null !== $authorization->note_url) {\n            $message .= sprintf(\n                ' <comment>%s<\/comment>',\n                $authorization->note_url\n            );\n        } elseif (null !== $authorization->app->url) {\n            $message .= sprintf(\n                ' <comment>%s<\/comment>',\n                $authorization->app->url\n            );\n        }\n\n        $output->writeln($message);\n    }\n\n    private $clientFactory;\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,null,22,22,22,22,null,22,22,null,null,null,null,null,null,16,null,16,null,null,null,null,null,null,null,22,null,22,null,22,22,22,22,22,22,null,null,null,22,null,22,22,22,22,null,22,22,22,22,22,null,22,22,null,null,null,null,null,null,null,null,null,10,null,10,10,null,10,null,null,null,null,null,null,null,null,null,null,10,null,10,10,10,10,3,3,10,3,3,10,null,10,null,null,null,null,null,null,null,null,4,null,4,4,4,4,null,null,null,null,null,null,null,8,null,8,8,8,8,8,8,8,8,4,4,4,4,8,8,8,8,8,8,null,8,8,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Command\/GitHub\/CreateAuthorizationCommand.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Command\\GitHub;\n\nuse Icecave\\Woodhouse\\GitHub\\GitHubClientFactory;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass CreateAuthorizationCommand extends AbstractGitHubCommand\n{\n    \/**\n     * @param GitHubClientFactory|null $clientFactory\n     *\/\n    public function __construct(GitHubClientFactory $clientFactory = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        parent::__construct($clientFactory);\n    }\n\n    protected function configure()\n    {\n        $this->typeCheck->configure(func_get_args());\n\n        parent::configure();\n\n        $this->setName('github:create-auth');\n        $this->setDescription('Create a new GitHub authorization.');\n\n        $this->addOption(\n            'scope',\n            's',\n            InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,\n            'One or more access scopes.',\n            array('repo')\n        );\n        $this->addOption(\n            'name',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'The name to use when creating the authorization.'\n        );\n        $this->addOption(\n            'url',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'The URL to use when creating the authorization.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        $client = $this->createClient($input, $output);\n        list($name, $url) = $this->authorizationDetails($input);\n\n        $this->outputAuthorization(\n            $output,\n            $client->createAuthorization($input->getOption('scope'), $name, $url)\n        );\n    }\n\n    \/**\n     * @param InputInterface $input\n     *\n     * @return tuple<string|null,string|null>\n     *\/\n    protected function authorizationDetails(InputInterface $input)\n    {\n        $this->typeCheck->authorizationDetails(func_get_args());\n\n        $name = $input->getOption('name');\n        $url = $input->getOption('url');\n        if (null === $name && null === $url) {\n            $name = static::DEFAULT_AUTHORIZATION_NAME;\n            $url = static::DEFAULT_AUTHORIZATION_URL;\n        }\n\n        return array($name, $url);\n    }\n\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,8,8,null,null,null,8,null,8,null,8,8,null,8,8,8,8,8,8,8,8,8,8,8,null,8,8,8,8,8,null,8,8,null,null,null,null,null,null,null,4,null,4,4,null,4,4,4,4,4,null,null,null,null,null,null,null,null,4,null,4,4,4,1,1,1,null,4,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Command\/GitHub\/DeleteAuthorizationCommand.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Command\\GitHub;\n\nuse Icecave\\Woodhouse\\GitHub\\GitHubClientFactory;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass DeleteAuthorizationCommand extends AbstractGitHubCommand\n{\n    \/**\n     * @param GitHubClientFactory|null $clientFactory\n     *\/\n    public function __construct(GitHubClientFactory $clientFactory = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        parent::__construct($clientFactory);\n    }\n\n    protected function configure()\n    {\n        $this->typeCheck->configure(func_get_args());\n\n        parent::configure();\n\n        $this->setName('github:delete-auth');\n        $this->setDescription('Delete a GitHub authorization.');\n\n        $this->addArgument(\n            'id',\n            InputArgument::REQUIRED,\n            'The ID of the authorization to delete.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        $client = $this->createClient($input, $output);\n        $client->deleteAuthorization(\n            intval($input->getArgument('id'))\n        );\n\n        $output->writeln('Authorization deleted.');\n    }\n\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,null,null,null,6,null,6,null,6,6,null,6,6,6,null,6,6,null,null,null,null,null,null,null,2,null,2,2,2,2,null,2,2,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Command\/GitHub\/ListAuthorizationsCommand.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Command\\GitHub;\n\nuse Icecave\\Woodhouse\\GitHub\\GitHubClientFactory;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass ListAuthorizationsCommand extends AbstractGitHubCommand\n{\n    \/**\n     * @param GitHubClientFactory|null $clientFactory\n     *\/\n    public function __construct(GitHubClientFactory $clientFactory = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        parent::__construct($clientFactory);\n    }\n\n    protected function configure()\n    {\n        $this->typeCheck->configure(func_get_args());\n\n        parent::configure();\n\n        $this->setName('github:list-auth');\n        $this->setDescription('List current GitHub authorizations.');\n\n        $this->addOption(\n            'name',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Restrict to authorizations with a specific name (PCRE pattern).'\n        );\n        $this->addOption(\n            'url',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Restrict to authorizations with a specific URL (PCRE pattern).'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        $client = $this->createClient($input, $output);\n        list($namePattern, $urlPattern) = $this->patterns($input);\n\n        $this->outputAuthorizations(\n            $output,\n            $client->authorizationsMatching(\n                $namePattern,\n                $urlPattern\n            )\n        );\n    }\n\n    \/**\n     * @param InputInterface $input\n     *\n     * @return tuple<string|null,string|null>\n     *\/\n    protected function patterns(InputInterface $input)\n    {\n        $this->typeCheck->patterns(func_get_args());\n\n        $namePattern = $input->getOption('name');\n        $urlPattern = $input->getOption('url');\n\n        if (null === $namePattern && null === $urlPattern) {\n            $urlPattern = sprintf(\n                '\/^%s$\/',\n                preg_quote(static::DEFAULT_AUTHORIZATION_URL, '\/')\n            );\n        }\n\n        return array($namePattern, $urlPattern);\n    }\n\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,8,8,null,null,null,8,null,8,null,8,8,null,8,8,8,8,null,8,8,8,8,8,null,8,8,null,null,null,null,null,null,null,4,null,4,4,null,4,4,4,4,null,4,4,4,null,null,null,null,null,null,null,null,4,null,4,4,null,4,1,1,1,1,1,null,4,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Command\/PublishCommand.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Command;\n\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\BuildStatus\\BuildStatus;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusImageSelector;\nuse Icecave\\Woodhouse\\BuildStatus\\StatusReaderFactory;\nuse Icecave\\Woodhouse\\Coverage\\CoverageImageSelector;\nuse Icecave\\Woodhouse\\Coverage\\CoverageReaderFactory;\nuse Icecave\\Woodhouse\\Publisher\\GitHubPublisher;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass PublishCommand extends Command\n{\n    \/**\n     * @param GitHubPublisher|null       $publisher\n     * @param StatusReaderFactory|null   $statusReaderFactory\n     * @param StatusImageSelector|null   $statusImageSelector\n     * @param CoverageReaderFactory|null $coverageReaderFactory\n     * @param CoverageImageSelector|null $coverageImageSelector\n     * @param Isolator|null              $isolator\n     *\/\n    public function __construct(\n        GitHubPublisher $publisher = null,\n        StatusReaderFactory $statusReaderFactory = null,\n        StatusImageSelector $statusImageSelector = null,\n        CoverageReaderFactory $coverageReaderFactory = null,\n        CoverageImageSelector $coverageImageSelector = null,\n        Isolator $isolator = null\n    ) {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->isolator = Isolator::get($isolator);\n\n        if (null === $publisher) {\n            $publisher = new GitHubPublisher(null, null, $this->isolator);\n        }\n\n        if (null === $statusReaderFactory) {\n            $statusReaderFactory = new StatusReaderFactory($this->isolator);\n        }\n\n        if (null === $statusImageSelector) {\n            $statusImageSelector = new StatusImageSelector;\n        }\n\n        if (null === $coverageReaderFactory) {\n            $coverageReaderFactory = new CoverageReaderFactory($this->isolator);\n        }\n\n        if (null === $coverageImageSelector) {\n            $coverageImageSelector = new CoverageImageSelector;\n        }\n\n        $this->publisher = $publisher;\n        $this->statusReaderFactory = $statusReaderFactory;\n        $this->statusImageSelector = $statusImageSelector;\n        $this->coverageReaderFactory = $coverageReaderFactory;\n        $this->coverageImageSelector = $coverageImageSelector;\n\n        parent::__construct();\n    }\n\n    protected function configure()\n    {\n        $this->typeCheck->configure(func_get_args());\n\n        $this->setName('publish');\n        $this->setDescription('Publish content to a GitHub repository.');\n\n        \/\/ Arguments ...\n\n        $this->addArgument(\n            'repository',\n            InputArgument::REQUIRED,\n            'The name of the GitHub repository to which content is published (eg: IcecaveStudios\/woodhouse).'\n        );\n\n        $this->addArgument(\n            'content',\n            InputArgument::REQUIRED | InputArgument::IS_ARRAY,\n            'Pairs of source\/destination folders separated by colons (eg: \/path\/to\/source-folder:\/path\/to\/destination-folder).'\n        );\n\n        \/\/ Git options ...\n\n        $this->addOption(\n            'message',\n            'm',\n            InputOption::VALUE_REQUIRED,\n            'Use the given message as the Git commit message.'\n        );\n\n        $this->addOption(\n            'branch',\n            'b',\n            InputOption::VALUE_REQUIRED,\n            'The target branch of the repository.',\n            'gh-pages'\n        );\n\n        $this->addOption(\n            'dry-run',\n            null,\n            InputOption::VALUE_NONE,\n            'Prepare for publication but do not make any changes.'\n        );\n\n        \/\/ GitHub options ...\n\n        $this->addOption(\n            'auth-token',\n            't',\n            InputOption::VALUE_REQUIRED,\n            'Use the given GitHub OAuth API token for authentication.'\n        );\n\n        $this->addOption(\n            'auth-token-env',\n            'e',\n            InputOption::VALUE_REQUIRED,\n            'Use the given GitHub OAuth API token for authentication, the value should be the name of an environment variable containing the token.'\n        );\n\n        \/\/ Build status options ...\n\n        $this->addOption(\n            'build-status-image',\n            's',\n            InputOption::VALUE_REQUIRED,\n            'Publish a coverage badge to the given location (requires one of the other --build-status-* options).'\n        );\n\n        $this->addOption(\n            'build-status-phpunit',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given PHPUnit JSON test report to determine the build status.'\n        );\n\n        $this->addOption(\n            'build-status-tap',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given TAP test report to determine the build status.'\n        );\n\n        $this->addOption(\n            'build-status-junit',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given JUnit XML test report to determine the build status.'\n        );\n\n        $this->addOption(\n            'build-status-result',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given result as the build status (options: passing, failing, pending, unknown, error).'\n        );\n\n        \/\/ Coverage image options ...\n\n        $this->addOption(\n            'coverage-image',\n            'c',\n            InputOption::VALUE_REQUIRED,\n            'Publish a coverage badge to the given location (requires one of the other --coverage-* options).'\n        );\n\n        $this->addOption(\n            'coverage-phpunit',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given PHPUnit Text code coverage report to determine the coverage percentage.'\n        );\n\n        $this->addOption(\n            'coverage-percentage',\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Use the given value as the coverage percentage.'\n        );\n\n        \/\/ Other ...\n\n        $this->addOption(\n            'image-theme',\n            null,\n            InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY,\n            'Use an alternative theme for the build status and coverage images.',\n            array('travis\/variable-width')\n        );\n    }\n\n    \/**\n     * @param mixed          $factory\n     * @param string         $optionPrefix\n     * @param InputInterface $input\n     *\n     * @return tuple<string|null, string|null>\n     *\/\n    protected function resolveReader($factory, $optionPrefix, InputInterface $input)\n    {\n        $this->typeCheck->resolveReader(func_get_args());\n\n        $reader = null;\n        $option = null;\n\n        \/\/ Select the appropriate status reader ...\n        foreach ($factory->supportedTypes() as $type) {\n            $optionName = $optionPrefix . '-' . $type;\n            if ($value = $input->getOption($optionName)) {\n                if (null === $option) {\n                    $reader = $factory->create($type, $value);\n                    $option = $optionName;\n                } else {\n                    throw new RuntimeException('--' . $optionName . ' is incompatible with --' . $option . '.');\n                }\n            }\n        }\n\n        return array($option, $reader);\n    }\n\n    \/**\n     * @param InputInterface $input\n     *\n     * @return array<string, string>\n     *\/\n    public function resolveThemes(InputInterface $input)\n    {\n        $this->typeCheck->resolveThemes(func_get_args());\n\n        $themesRoot = $this->getApplication()->vendorPath() . '\/ezzatron\/ci-status-images\/img';\n        $themes = array();\n\n        foreach ($input->getOption('image-theme') as $theme) {\n            $themePath = $themesRoot . '\/' . $theme;\n            if (!$this->isolator->is_dir($themePath)) {\n                throw new RuntimeException('Unknown image theme \"' . $theme . '\".');\n            }\n            $themes[$theme] = $themePath;\n        }\n\n        return $themes;\n    }\n\n    \/**\n     * @param array<string, string> $themes\n     * @param string                $targetPath\n     * @param string                $category\n     * @param string                $filename\n     *\/\n    public function enqueueImages(array $themes, $targetPath, $category, $filename)\n    {\n        $this->typeCheck->enqueueImages(func_get_args());\n\n        \/\/ If there is only a single theme, publish the image directly to the target path.\n        if (count($themes) === 1) {\n            $source = current($themes) . '\/' . $category . '\/' . $filename;\n            $this->publisher->add($source, $targetPath);\n\n            return;\n        }\n\n        \/\/ If there are multiple themes publish the image once for each theme.\n        \/\/ For example, \"\/artifacts\/coverage.png\" becomes \"\/artifacts\/<theme>\/<variant>\/coverage.png\"\n        $dirname  = dirname($targetPath);\n        $basename = basename($targetPath);\n\n        foreach ($themes as $theme => $themePath) {\n            $source = $themePath . '\/' . $category . '\/' . $filename;\n            $target = $dirname . '\/' . $theme . '\/' . $basename;\n            $this->publisher->add($source, $target);\n        }\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        list($statusType, $statusReader)     = $this->resolveReader($this->statusReaderFactory, 'build-status', $input);\n        list($coverageType, $coverageReader) = $this->resolveReader($this->coverageReaderFactory, 'coverage', $input);\n        $imageThemes                         = $this->resolveThemes($input);\n\n        \/\/ Enqueue build status images for publication ...\n        if ($statusImageTarget = $input->getOption('build-status-image')) {\n            if (null !== $statusType) {\n                $status = $statusReader->readStatus();\n            } elseif ($input->getOption('no-interaction')) {\n                $status = BuildStatus::ERROR();\n            } else {\n                throw new RuntimeException('--build-status-image requires one of the other --build-status-* options.');\n            }\n            $filename = $this->statusImageSelector->imageFilename($status);\n            $this->enqueueImages($imageThemes, $statusImageTarget, 'build-status', $filename);\n        } elseif ($statusType) {\n            throw new RuntimeException('--' . $statusType . ' requires --build-status-image.');\n        }\n\n        \/\/ Enqueue test coverage images for publication ...\n        if ($coverageImageTarget = $input->getOption('coverage-image')) {\n            if (null !== $coverageType) {\n                $percentage = $coverageReader->readPercentage();\n                $filename = $this->coverageImageSelector->imageFilename($percentage);\n            } elseif ($input->getOption('no-interaction')) {\n                $filename = $this->coverageImageSelector->errorImageFilename();\n            } else {\n                throw new RuntimeException('--coverage-image requires one of the other --coverage-* options.');\n            }\n\n            $this->enqueueImages($imageThemes, $coverageImageTarget, 'test-coverage', $filename);\n        } elseif ($coverageType) {\n            throw new RuntimeException('--' . $coverageType . ' requires --coverage-image.');\n        }\n\n        \/\/ Enqueue content ...\n        foreach ($input->getArgument('content') as $content) {\n            $index = strrpos($content, ':');\n            if (false === $index) {\n                throw new RuntimeException('Invalid content specifier: \"' . $content . '\", content must be specified as colon separated pairs of source and destination path.');\n            }\n\n            $sourcePath = substr($content, 0, $index);\n            $targetPath = substr($content, $index + 1);\n\n            if (!$this->isolator->file_exists($sourcePath)) {\n                throw new RuntimeException('Content does not exist: \"' . $sourcePath . '\".');\n            }\n\n            if (!preg_match('{^([a-z]:[\\\\\\\\\/]|\/)}i', $sourcePath)) {\n                $sourcePath = $this->isolator->getcwd() . '\/' . $sourcePath;\n            }\n\n            $this->publisher->add(\n                $sourcePath,\n                $targetPath\n            );\n        }\n\n        \/\/ Set the authentication token ...\n        $authToken = $input->getOption('auth-token');\n        if ($authTokenEnv = $input->getOption('auth-token-env')) {\n            if (null === $authToken) {\n                $authToken = $this->isolator->getenv($authTokenEnv);\n            } else {\n                throw new RuntimeException('--auth-token-env is incompatible with --auth-token.');\n            }\n        }\n\n        if ($message = $input->getOption('message')) {\n            $this->publisher->setCommitMessage($message);\n        }\n\n        $this->publisher->setAuthToken($authToken);\n        $this->publisher->setRepository($input->getArgument('repository'));\n        $this->publisher->setBranch($input->getOption('branch'));\n\n        if ($output->getVerbosity() === OutputInterface::VERBOSITY_VERBOSE) {\n            $output->writeln(\n                sprintf(\n                    'Publishing to <info>%s<\/info> at <info>%s<\/info>:',\n                    $input->getOption('branch'),\n                    $input->getArgument('repository')\n                )\n            );\n\n            foreach ($this->publisher->contentPaths() as $sourcePath => $targetPath) {\n                $output->writeln(\n                    sprintf(\n                        ' * <info>%s<\/info> -> <info>%s<\/info>',\n                        $sourcePath,\n                        $targetPath\n                    )\n                );\n            }\n        }\n\n        if ($input->getOption('dry-run')) {\n            if ($this->publisher->dryRun()) {\n                $output->writeln('Content prepared successfully (dry run).');\n            } else {\n                $output->writeln('No changes to publish (dry run).');\n            }\n        } else {\n            if ($this->publisher->publish()) {\n                $output->writeln('Content published successfully.');\n            } else {\n                $output->writeln('No changes to publish.');\n            }\n        }\n    }\n\n    private $typeCheck;\n    private $publisher;\n    private $statusReaderFactory;\n    private $statusImageSelector;\n    private $coverageReaderFactory;\n    private $coverageImageSelector;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27,null,27,null,27,27,27,null,27,27,27,null,27,27,27,null,27,27,27,null,27,27,27,null,27,27,27,27,27,null,27,27,null,null,null,27,null,27,27,null,null,null,27,27,27,null,27,null,27,27,27,null,27,null,null,null,27,27,27,27,null,27,null,27,27,27,27,27,null,27,null,27,27,27,27,null,27,null,null,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,null,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,null,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,27,27,27,27,null,27,null,null,null,27,27,27,27,27,27,27,27,null,null,null,null,null,null,null,null,null,null,24,null,24,24,null,null,24,24,24,9,9,9,9,2,null,9,24,null,23,null,null,null,null,null,null,null,null,null,22,null,22,22,null,22,22,22,1,null,21,21,null,21,null,null,null,null,null,null,null,null,null,null,6,null,null,6,4,4,null,4,null,null,null,null,2,2,null,2,2,2,2,2,2,null,null,null,null,null,null,null,24,null,24,23,22,null,null,21,4,2,4,1,1,1,null,3,3,20,1,null,null,null,19,4,2,2,4,1,1,1,null,null,3,18,1,null,null,null,17,17,17,1,null,null,16,16,null,16,1,null,null,15,13,13,null,15,15,null,15,15,null,null,15,15,2,1,1,1,null,1,null,14,1,1,null,14,14,14,null,14,1,1,1,1,1,1,1,null,1,1,1,1,1,null,1,1,1,1,null,14,2,1,1,1,null,2,12,11,11,1,null,null,14,null,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Console\/Helper\/HiddenInputHelper.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Console\\Helper;\n\nuse ErrorException;\nuse Icecave\\Isolator\\Isolator;\nuse RuntimeException;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nclass HiddenInputHelper extends Helper\n{\n    \/**\n     * @param string|null   $hiddenInputPath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($hiddenInputPath = null, Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $hiddenInputPath) {\n            $hiddenInputPath = __DIR__ . '\/..\/..\/..\/..\/..\/res\/bin\/hiddeninput.exe';\n        }\n\n        $this->hiddenInputPath = $hiddenInputPath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getName()\n    {\n        $this->typeCheck->getName(func_get_args());\n\n        return 'hidden-input';\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function hiddenInputPath()\n    {\n        $this->typeCheck->hiddenInputPath(func_get_args());\n\n        return $this->hiddenInputPath;\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    public function askHiddenResponse(OutputInterface $output, $question)\n    {\n        $this->typeCheck->askHiddenResponse(func_get_args());\n\n        if ($this->isolator->defined('PHP_WINDOWS_VERSION_BUILD')) {\n            return $this->askHiddenResponseWindows($output, $question);\n        }\n\n        return $this->askHiddenResponseStty($output, $question);\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    protected function askHiddenResponseWindows(OutputInterface $output, $question)\n    {\n        $this->typeCheck->askHiddenResponseWindows(func_get_args());\n\n        $output->write($question);\n        $value = rtrim(\n            $this->execute($this->hiddenInputRealPath()),\n            \"\\r\\n\"\n        );\n        $output->writeln('');\n\n        return $value;\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    protected function askHiddenResponseStty(OutputInterface $output, $question)\n    {\n        $this->typeCheck->askHiddenResponseStty(func_get_args());\n\n        $output->write($question);\n\n        $sttyMode = $this->execute('stty -g');\n        $this->execute('stty -echo');\n\n        $error = null;\n\n        try {\n            $value = rtrim(\n                $this->isolator->fgets(STDIN),\n                \"\\r\\n\"\n            );\n        } catch (ErrorException $error) {\n            \/\/ reset stty before throwing\n        }\n\n        $this->execute(sprintf('stty %s', $sttyMode));\n        if (null !== $error) {\n            throw new RuntimeException('Unable to read response.', 0, $error);\n        }\n        $output->writeln('');\n\n        return $value;\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function hiddenInputRealPath()\n    {\n        $this->typeCheck->hiddenInputRealPath(func_get_args());\n\n        if (null === $this->hiddenInputRealPath) {\n            $this->hiddenInputRealPath = sprintf(\n                '%s\/hiddeninput-%s.exe',\n                $this->isolator->sys_get_temp_dir(),\n                $this->isolator->uniqid()\n            );\n            $this->isolator->copy(\n                $this->hiddenInputPath(),\n                $this->hiddenInputRealPath\n            );\n        }\n\n        return $this->hiddenInputRealPath;\n    }\n\n    \/**\n     * @param string $command\n     *\n     * @return string\n     *\/\n    protected function execute($command)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        $result = $this->isolator->shell_exec($command);\n        if (false === $result) {\n            throw new RuntimeException('Unable to create or read hidden input dialog.');\n        }\n\n        return $result;\n    }\n\n    private $hiddenInputPath;\n    private $hiddenInputRealPath;\n    private $isolator;\n    private $hasSttyAvailable;\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,7,1,1,null,7,7,7,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,4,null,4,null,null,null,null,null,null,null,null,null,null,5,null,5,2,null,null,3,null,null,null,null,null,null,null,null,null,null,2,null,2,2,2,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,3,null,3,null,3,2,null,2,null,null,2,2,null,1,2,null,null,null,2,2,1,null,1,null,1,null,null,null,null,null,null,null,2,null,2,2,2,2,2,2,2,2,2,2,2,null,2,null,null,null,null,null,null,null,null,null,5,null,5,5,2,null,null,3,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Coverage\/CoverageImageSelector.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Coverage;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nclass CoverageImageSelector\n{\n    \/**\n     * @param integer $increments\n     *\/\n    public function __construct($increments = 5)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->increments = $increments;\n    }\n\n    \/**\n     * @param float $percentage The actual percentage coverage.\n     *\n     * @return integer The coverage percentage rounded do the nearest 5%.\n     *\/\n    public function roundPercentage($percentage)\n    {\n        $this->typeCheck->roundPercentage(func_get_args());\n\n        return intval($percentage - $percentage % $this->increments);\n    }\n\n    \/**\n     * @param float $percentage The actual percentage coverage.\n     *\n     * @return string The filename of the image to use.\n     *\/\n    public function imageFilename($percentage)\n    {\n        $this->typeCheck->imageFilename(func_get_args());\n\n        $percentage = $this->roundPercentage($percentage);\n\n        return sprintf('test-coverage-%03d.png', $percentage);\n    }\n\n    \/**\n     * @return string The filename of the \"error\" image.\n     *\/\n    public function errorImageFilename()\n    {\n        $this->typeCheck->errorImageFilename(func_get_args());\n\n        return 'test-coverage-error.png';\n    }\n\n    \/**\n     * @return string The filename of the \"unknown\" image.\n     *\/\n    public function unknownImageFilename()\n    {\n        $this->typeCheck->unknownImageFilename(func_get_args());\n\n        return 'test-coverage-unknown.png';\n    }\n\n    private $typeCheck;\n    private $increments;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,204,null,204,204,null,null,null,null,null,null,null,null,202,null,202,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Coverage\/CoverageReaderFactory.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Coverage;\n\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\Coverage\\Readers\\CommandLineReader;\nuse Icecave\\Woodhouse\\Coverage\\Readers\\PhpUnitTextReader;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse InvalidArgumentException;\n\nclass CoverageReaderFactory\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return array<string>\n     *\/\n    public function supportedTypes()\n    {\n        $this->typeCheck->supportedTypes(func_get_args());\n\n        return array(\n            'percentage',\n            'phpunit',\n        );\n    }\n\n    \/**\n     * @param string $type\n     * @param string $argument\n     *\n     * @return CoverageReaderInterface\n     *\/\n    public function create($type, $argument)\n    {\n        $this->typeCheck->create(func_get_args());\n\n        switch ($type) {\n            case 'percentage':\n                return new CommandLineReader($argument);\n            case 'phpunit':\n                return new PhpUnitTextReader($argument, $this->isolator);\n        }\n\n        throw new InvalidArgumentException('Unknown reader type: \"' . $type . '\".');\n    }\n\n    private $typeCheck;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,4,4,null,null,null,null,null,null,1,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,3,null,null,3,1,2,1,null,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Coverage\/CoverageReaderInterface.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Coverage;\n\ninterface CoverageReaderInterface\n{\n    \/**\n     * @return float\n     *\/\n    public function readPercentage();\n}","coverage":[null,null,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Coverage\/Readers\/CommandLineReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Coverage\\Readers;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse Icecave\\Woodhouse\\Coverage\\CoverageReaderInterface;\n\nclass CommandLineReader implements CoverageReaderInterface\n{\n    \/**\n     * @param numeric $percentage\n     *\/\n    public function __construct($percentage)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->percentage = floatval($percentage);\n    }\n\n    \/**\n     * @return float\n     *\/\n    public function readPercentage()\n    {\n        $this->typeCheck->readPercentage(func_get_args());\n\n        return $this->percentage;\n    }\n\n    private $typeCheck;\n    private $percentage;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,1,null,1,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Coverage\/Readers\/PhpUnitTextReader.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Coverage\\Readers;\n\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\Coverage\\CoverageReaderInterface;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\n\nclass PhpUnitTextReader implements CoverageReaderInterface\n{\n    const PATTERN = '\/^\\s+Lines:\\s+(\\d{1,3}\\.\\d\\d)\/m';\n\n    \/**\n     * @param string        $reportPath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($reportPath, Isolator $isolator = null)\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->reportPath = $reportPath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return float\n     *\/\n    public function readPercentage()\n    {\n        $this->typeCheck->readPercentage(func_get_args());\n\n        $content = $this->isolator->file_get_contents($this->reportPath);\n\n        $matches = array();\n        if (preg_match(self::PATTERN, $content, $matches)) {\n            return floatval($matches[1]);\n        }\n\n        throw new RuntimeException('Unable to parse PHPUnit coverage report.');\n    }\n\n    private $typeCheck;\n    private $reportPath;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,2,null,null,null,null,null,null,2,null,2,null,2,2,1,null,null,1,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Git\/Git.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Git;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\nuse Symfony\\Component\\Process\\ExecutableFinder;\nuse Symfony\\Component\\Process\\Process;\n\nclass Git\n{\n    \/**\n     * @param ExecutableFinder|null $executableFinder\n     *\/\n    public function __construct(\n        ExecutableFinder $executableFinder = null\n    ) {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $executableFinder) {\n            $executableFinder = new ExecutableFinder;\n        }\n\n        $this->executable = $executableFinder->find('git');\n        $this->outputFilter = function ($output) { return $output; };\n    }\n\n    \/**\n     * @param callable|null $callback\n     *\/\n    public function setOutputFilter($callback)\n    {\n        $this->typeCheck->setOutputFilter(func_get_args());\n\n        $this->outputFilter = $callback;\n    }\n\n    \/**\n     * @param string       $path\n     * @param string       $url\n     * @param string|null  $branch\n     * @param integer|null $depth\n     *\n     * @return Process\n     *\/\n    public function cloneRepo($path, $url, $branch = null, $depth = null)\n    {\n        $this->typeCheck->cloneRepo(func_get_args());\n\n        $arguments = array('clone', $url);\n\n        if (null !== $branch) {\n            $arguments[] = '--branch';\n            $arguments[] = $branch;\n        }\n\n        if (null !== $depth) {\n            $arguments[] = '--depth';\n            $arguments[] = $depth;\n        }\n\n        $arguments[] = $path;\n\n        $process = $this->execute($arguments);\n\n        $this->workingDirectory = $path;\n\n        return $process;\n    }\n\n    \/**\n     * @param string  $branch\n     * @param boolean $orphan\n     *\n     * @return Process\n     *\/\n    public function checkout($branch, $orphan = false)\n    {\n        $this->typeCheck->checkout(func_get_args());\n\n        $arguments = array('checkout');\n        if ($orphan) {\n            $arguments[] = '--orphan';\n        }\n        $arguments[] = $branch;\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param string  $path\n     * @param boolean $force\n     *\n     * @return Process\n     *\/\n    public function add($path, $force = true)\n    {\n        $this->typeCheck->add(func_get_args());\n\n        $arguments = array('add', $path);\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param string  $path\n     * @param boolean $force\n     *\n     * @return Process\n     *\/\n    public function remove($path, $force = true)\n    {\n        $this->typeCheck->remove(func_get_args());\n\n        $arguments = array('rm');\n        if ($force) {\n            $arguments[] = '-rf';\n            $arguments[] = '--ignore-unmatch';\n        }\n        $arguments[] = $path;\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param boolean $diffStagedFiles\n     *\n     * @return Process\n     *\/\n    public function diff($diffStagedFiles = false)\n    {\n        $this->typeCheck->diff(func_get_args());\n\n        $arguments = array('diff');\n        if ($diffStagedFiles) {\n            $arguments[] = '--cached';\n        }\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param string $message\n     *\n     * @return Process\n     *\/\n    public function commit($message)\n    {\n        $this->typeCheck->commit(func_get_args());\n\n        $arguments = array('commit', '-m', $message);\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param string      $remote\n     * @param string|null $branch\n     *\n     * @return Process\n     *\/\n    public function push($remote = 'origin', $branch = null)\n    {\n        $this->typeCheck->push(func_get_args());\n\n        $arguments = array('push', $remote);\n        if (null !== $branch) {\n            $arguments[] = $branch;\n        }\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @return Process\n     *\/\n    public function pull()\n    {\n        $this->typeCheck->pull(func_get_args());\n\n        $arguments = array('pull');\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @param string     $key\n     * @param stringable $value\n     *\n     * @return Process\n     *\/\n    public function setConfig($key, $value)\n    {\n        $this->typeCheck->setConfig(func_get_args());\n\n        $arguments = array('config', $key, $value);\n\n        return $this->execute($arguments);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function executable()\n    {\n        $this->typeCheck->executable(func_get_args());\n\n        return $this->executable;\n    }\n\n    \/**\n     * @param array<stringable> $arguments\n     *\n     * @return Process\n     *\/\n    public function execute(array $arguments)\n    {\n        $this->typeCheck->execute(func_get_args());\n\n        $process = $this->createProcess();\n\n        $command = $this->executable;\n        foreach ($arguments as $argument) {\n            $command .= ' ' . escapeshellarg($argument);\n        }\n\n        $process->setCommandLine($command);\n\n        if ($this->workingDirectory) {\n            $process->setWorkingDirectory($this->workingDirectory);\n        }\n\n        $process->run();\n\n        if (!$process->isSuccessful()) {\n            $message  = 'Git command failed!';\n            $message .= PHP_EOL;\n            $message .= 'Command Line: ' . call_user_func($this->outputFilter, $command);\n            $message .= PHP_EOL;\n            $message .= PHP_EOL;\n            $message .= call_user_func($this->outputFilter, $process->getErrorOutput());\n            throw new RuntimeException($message);\n        }\n\n        return $process;\n    }\n\n    \/**\n     * @return Process\n     *\/\n    protected function createProcess()\n    {\n        $this->typeCheck->createProcess(func_get_args());\n\n        return new Process('');\n    }\n\n    private $typeCheck;\n    private $outputFilter;\n    private $executable;\n    private $workingDirectory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18,null,18,1,1,null,18,null,18,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,null,null,null,null,null,2,null,2,null,2,1,1,1,null,2,1,1,1,null,2,null,2,null,2,null,2,null,null,null,null,null,null,null,null,null,null,2,null,2,2,1,1,2,null,2,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,2,null,2,2,1,1,null,2,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,2,null,2,2,1,1,null,2,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,null,null,null,null,null,2,null,2,null,null,null,null,null,null,null,null,null,15,null,15,null,15,15,15,15,null,15,null,15,1,1,null,15,null,15,1,1,1,1,1,1,1,null,null,14,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/GitHub\/GitHubClient.php","source":"<?php\nnamespace Icecave\\Woodhouse\\GitHub;\n\nuse Buzz\\Browser;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse RuntimeException;\nuse stdClass;\n\nclass GitHubClient\n{\n    \/**\n     * @param string|null  $url\n     * @param Browser|null $browser\n     *\/\n    public function __construct(\n        $url = null,\n        Browser $browser = null\n    ) {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $url) {\n            $url = 'https:\/\/api.github.com\/';\n        }\n        if (null === $browser) {\n            $browser = new Browser;\n        }\n\n        $this->url = $url;\n        $this->browser = $browser;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function url()\n    {\n        $this->typeCheck->url(func_get_args());\n\n        return $this->url;\n    }\n\n    \/**\n     * @return Browser\n     *\/\n    public function browser()\n    {\n        $this->typeCheck->browser(func_get_args());\n\n        return $this->browser;\n    }\n\n    \/**\n     * @return array<stdClass>\n     *\/\n    public function authorizations()\n    {\n        $this->typeCheck->authorizations(func_get_args());\n\n        return $this->get('authorizations');\n    }\n\n    \/**\n     * @param string|null $namePattern\n     * @param string|null $urlPattern\n     *\n     * @return array<stdClass>\n     *\/\n    public function authorizationsMatching($namePattern = null, $urlPattern = null)\n    {\n        $this->typeCheck->authorizationsMatching(func_get_args());\n\n        if (null === $namePattern) {\n            $namePattern = '\/.*\/';\n        }\n        if (null === $urlPattern) {\n            $urlPattern = '\/.*\/';\n        }\n\n        $authorizations = array();\n        foreach ($this->authorizations() as $authorization) {\n            if (null === $authorization->note) {\n                $name = $authorization->app->name;\n            } else {\n                $name = $authorization->note;\n            }\n            if (null === $authorization->note_url) {\n                $url = $authorization->app->url;\n            } else {\n                $url = $authorization->note_url;\n            }\n\n            if (preg_match($namePattern, $name) && preg_match($urlPattern, $url)) {\n                $authorizations[] = $authorization;\n            }\n        }\n\n        return $authorizations;\n    }\n\n    \/**\n     * @param array<string> $scopes\n     * @param string|null   $note\n     * @param string|null   $noteUrl\n     *\n     * @return stdClass\n     *\/\n    public function createAuthorization(\n        array $scopes = array(),\n        $note = null,\n        $noteUrl = null\n    ) {\n        $this->typeCheck->createAuthorization(func_get_args());\n\n        $data = new stdClass;\n        if (array() !== $scopes) {\n            $data->scopes = $scopes;\n        }\n        if (null !== $note) {\n            $data->note = $note;\n        }\n        if (null !== $noteUrl) {\n            $data->note_url = $noteUrl;\n        }\n\n        return $this->post('authorizations', $data);\n    }\n\n    \/**\n     * @param integer $id\n     *\/\n    public function deleteAuthorization($id)\n    {\n        $this->typeCheck->deleteAuthorization(func_get_args());\n\n        $this->delete(sprintf(\n            'authorizations\/%s',\n            rawurlencode($id)\n        ));\n    }\n\n    \/**\n     * @param string $url\n     *\n     * @return mixed\n     *\/\n    protected function get($url)\n    {\n        $this->typeCheck->get(func_get_args());\n\n        $url = $this->url() . $url;\n        $response = $this->browser()->get($url);\n        if (!$response->isSuccessful()) {\n            throw new RuntimeException(sprintf(\n                \"Unable to get '%s'. Server returned '%s'.\",\n                $url,\n                $response->getReasonPhrase()\n            ));\n        }\n\n        return $this->parseJson($response->getContent());\n    }\n\n    \/**\n     * @param string $url\n     * @param mixed  $data\n     *\n     * @return mixed\n     *\/\n    protected function post($url, $data)\n    {\n        $this->typeCheck->post(func_get_args());\n\n        $url = $this->url() . $url;\n        $response = $this->browser()->post($url, array(), json_encode($data));\n        if (!$response->isSuccessful()) {\n            throw new RuntimeException(sprintf(\n                \"Unable to post to '%s'. Server returned '%s'.\",\n                $url,\n                $response->getReasonPhrase()\n            ));\n        }\n\n        return $this->parseJson($response->getContent());\n    }\n\n    \/**\n     * @param string $url\n     *\/\n    protected function delete($url)\n    {\n        $this->typeCheck->delete(func_get_args());\n\n        $url = $this->url() . $url;\n        $response = $this->browser()->delete($url);\n        if (!$response->isSuccessful()) {\n            throw new RuntimeException(sprintf(\n                \"Unable to delete '%s'. Server returned '%s'.\",\n                $url,\n                $response->getReasonPhrase()\n            ));\n        }\n    }\n\n    \/**\n     * @param string $json\n     *\n     * @return mixed\n     *\/\n    protected function parseJson($json)\n    {\n        $this->typeCheck->parseJson(func_get_args());\n\n        $data = json_decode($json);\n        if (JSON_ERROR_NONE !== json_last_error()) {\n            throw new RuntimeException('Unable to decode response from server.');\n        }\n\n        return $data;\n    }\n\n    private $url;\n    private $browser;\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,14,null,14,1,1,14,1,1,null,14,14,14,null,null,null,null,null,null,10,null,10,null,null,null,null,null,null,null,11,null,11,null,null,null,null,null,null,null,3,null,3,null,null,null,null,null,null,null,null,null,null,3,null,3,1,1,3,1,1,null,3,3,3,3,3,3,null,3,3,3,3,null,null,3,3,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,4,4,1,1,4,1,1,4,1,1,null,4,null,null,null,null,null,null,null,2,null,2,2,2,2,1,null,null,null,null,null,null,null,null,3,null,3,3,3,1,1,1,1,1,null,null,2,null,null,null,null,null,null,null,null,null,null,4,null,4,4,4,1,1,1,1,1,null,null,3,null,null,null,null,null,null,null,2,null,2,2,2,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,5,null,5,5,2,null,null,3,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/GitHub\/GitHubClientFactory.php","source":"<?php\nnamespace Icecave\\Woodhouse\\GitHub;\n\nuse Buzz\\Browser;\nuse Buzz\\Client\\Curl;\nuse Buzz\\Listener\\BasicAuthListener;\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nclass GitHubClientFactory\n{\n    \/**\n     * @param string|null   $caCertificatePath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(\n        $caCertificatePath = null,\n        Isolator $isolator = null\n    ) {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $caCertificatePath) {\n            $caCertificatePath = __DIR__ . '\/..\/..\/..\/..\/res\/cacert\/cacert.pem';\n        }\n\n        $this->userAgent = null;\n        $this->caCertificatePath = $caCertificatePath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function userAgent()\n    {\n        $this->typeCheck->userAgent(func_get_args());\n\n        return $this->userAgent;\n    }\n\n    \/**\n     * @param string|null $userAgent\n     *\/\n    public function setUserAgent($userAgent)\n    {\n        $this->typeCheck->setUserAgent(func_get_args());\n\n        $this->userAgent = $userAgent;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function caCertificatePath()\n    {\n        $this->typeCheck->caCertificatePath(func_get_args());\n\n        return $this->caCertificatePath;\n    }\n\n    \/**\n     * @param string|null $username\n     * @param string|null $password\n     *\n     * @return GitHubClient\n     *\/\n    public function create($username = null, $password = null)\n    {\n        $this->typeCheck->create(func_get_args());\n\n        $client = new Curl;\n        $client->setOption(CURLOPT_CAINFO, $this->caCertificateRealPath());\n\n        if ($userAgent = $this->userAgent()) {\n            $client->setOption(CURLOPT_USERAGENT, $userAgent);\n        }\n\n        $browser = new Browser($client);\n\n        if (null !== $username) {\n            $browser->addListener(\n                new BasicAuthListener($username, $password)\n            );\n        }\n\n        return new GitHubClient(null, $browser);\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function caCertificateRealPath()\n    {\n        $this->typeCheck->caCertificateRealPath(func_get_args());\n\n        if (null === $this->caCertificateRealPath) {\n            $this->caCertificateRealPath = sprintf(\n                '%s\/cacert-%s.pem',\n                $this->isolator->sys_get_temp_dir(),\n                $this->isolator->uniqid()\n            );\n            $this->isolator->copy(\n                $this->caCertificatePath(),\n                $this->caCertificateRealPath\n            );\n        }\n\n        return $this->caCertificateRealPath;\n    }\n\n    private $userAgent;\n    private $caCertificatePath;\n    private $caCertificateRealPath;\n    private $typeCheck;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,1,1,null,6,6,6,6,null,null,null,null,null,null,4,null,4,null,null,null,null,null,null,null,2,null,2,2,null,null,null,null,null,null,5,null,5,null,null,null,null,null,null,null,null,null,null,3,null,3,3,null,3,1,1,null,3,null,3,1,1,1,1,null,3,null,null,null,null,null,null,null,3,null,3,3,3,3,3,3,3,3,3,3,3,null,3,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Publisher\/AbstractPublisher.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Publisher;\n\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\n\nabstract class AbstractPublisher implements PublisherInterface\n{\n    public function __construct()\n    {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        $this->contentPaths = array();\n    }\n\n    \/**\n     * Enqueue content to be published.\n     *\n     * @param string $sourcePath\n     * @param string $targetPath\n     *\/\n    public function add($sourcePath, $targetPath)\n    {\n        $this->typeCheck->add(func_get_args());\n\n        $this->contentPaths[$sourcePath] = ltrim($targetPath, '\/');\n    }\n\n    \/**\n     * Remove enqueued content at $sourcePath.\n     *\n     * @param string $sourcePath\n     *\/\n    public function remove($sourcePath)\n    {\n        $this->typeCheck->remove(func_get_args());\n\n        unset($this->contentPaths[$sourcePath]);\n    }\n\n    \/**\n     * Clear all enqueued content.\n     *\/\n    public function clear()\n    {\n        $this->typeCheck->clear(func_get_args());\n\n        $this->contentPaths = array();\n    }\n\n    \/**\n     * @return array<string, string>\n     *\/\n    public function contentPaths()\n    {\n        $this->typeCheck->contentPaths(func_get_args());\n\n        return $this->contentPaths;\n    }\n\n    private $typeCheck;\n    private $contentPaths;\n}","coverage":[null,null,null,null,null,null,null,null,null,5,null,5,5,null,null,null,null,null,null,null,null,null,4,null,4,4,null,null,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,5,null,5,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Publisher\/GitHubPublisher.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Publisher;\n\nuse Exception;\nuse Icecave\\Isolator\\Isolator;\nuse Icecave\\Woodhouse\\Git\\Git;\nuse Icecave\\Woodhouse\\TypeCheck\\TypeCheck;\nuse InvalidArgumentException;\nuse RuntimeException;\nuse Symfony\\Component\\Filesystem\\Filesystem;\n\nclass GitHubPublisher extends AbstractPublisher\n{\n    const REPOSITORY_PATTERN = '\/^[a-z0-9_-]+\\\/[a-z0-9_-]+$\/i';\n    const AUTH_TOKEN_PATTERN = '\/^[0-9a-f]{40}$\/i';\n\n    \/**\n     * @param Git|null        $git\n     * @param Filesystem|null $fileSystem\n     * @param Isolator|null   $isolator\n     *\/\n    public function __construct(\n        Git $git = null,\n        Filesystem $fileSystem = null,\n        Isolator $isolator = null\n    ) {\n        $this->typeCheck = TypeCheck::get(__CLASS__, func_get_args());\n\n        if (null === $git) {\n            $git = new Git;\n        }\n\n        if (null === $fileSystem) {\n            $fileSystem = new Filesystem;\n        }\n\n        $this->git = $git;\n        $this->branch = 'gh-pages';\n        $this->commitMessage = 'Content published by Woodhouse.';\n        $this->maxPushAttempts = 3;\n        $this->fileSystem = $fileSystem;\n        $this->isolator = Isolator::get($isolator);\n\n        \/\/ Setup an output filter so that the auth token cannot be leaked ...\n        $self = $this;\n        $filter = function ($buffer) use ($self) {\n            $authToken   = $self->authToken();\n            $replacement = substr($authToken, 0, 4) . str_repeat('*', strlen($authToken) - 8) . substr($authToken, -4);\n\n            return str_ireplace($authToken, $replacement, $buffer);\n        };\n\n        $this->git->setOutputFilter($filter);\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return Filesystem\n     *\/\n    public function fileSystem()\n    {\n        $this->typeCheck->fileSystem(func_get_args());\n\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @return Git\n     *\/\n    public function git()\n    {\n        $this->typeCheck->git(func_get_args());\n\n        return $this->git;\n    }\n\n    \/**\n     * Publish enqueued content.\n     *\n     * @return boolean True if there were changes published; otherwise false.\n     *\/\n    public function publish()\n    {\n        $this->typeCheck->publish(func_get_args());\n\n        return $this->doPublish(true);\n    }\n\n    \/**\n     * Perform a publication dry-run.\n     *\n     * @return boolean True if there are changes to publish; otherwise false.\n     *\/\n    public function dryRun()\n    {\n        $this->typeCheck->dryRun(func_get_args());\n\n        return $this->doPublish(false);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function repository()\n    {\n        $this->typeCheck->repository(func_get_args());\n\n        return $this->repository;\n    }\n\n    \/**\n     * @param string $repository\n     *\/\n    public function setRepository($repository)\n    {\n        $this->typeCheck->setRepository(func_get_args());\n\n        if (!preg_match(self::REPOSITORY_PATTERN, $repository)) {\n            throw new InvalidArgumentException('Invalid repository name: \"' . $repository . '\".');\n        }\n\n        $this->repository = $repository;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function repositoryUrl()\n    {\n        $this->typeCheck->repositoryUrl(func_get_args());\n\n        if (null === $this->repository) {\n            return null;\n        } elseif (null === $this->authToken) {\n            return sprintf('https:\/\/github.com\/%s.git', $this->repository);\n        } else {\n            return sprintf('https:\/\/%s:x-oauth-basic@github.com\/%s.git', $this->authToken, $this->repository);\n        }\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function branch()\n    {\n        $this->typeCheck->branch(func_get_args());\n\n        return $this->branch;\n    }\n\n    \/**\n     * @param string $branch\n     *\/\n    public function setBranch($branch)\n    {\n        $this->typeCheck->setBranch(func_get_args());\n\n        $this->branch = $branch;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function commitMessage()\n    {\n        $this->typeCheck->commitMessage(func_get_args());\n\n        return $this->commitMessage;\n    }\n\n    \/**\n     * @param string $commitMessage\n     *\/\n    public function setCommitMessage($commitMessage)\n    {\n        $this->typeCheck->setCommitMessage(func_get_args());\n\n        $this->commitMessage = $commitMessage;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function authToken()\n    {\n        $this->typeCheck->authToken(func_get_args());\n\n        return $this->authToken;\n\n    }\n\n    \/**\n     * @param string|null $authToken\n     *\/\n    public function setAuthToken($authToken)\n    {\n        $this->typeCheck->setAuthToken(func_get_args());\n\n        if (!preg_match(self::AUTH_TOKEN_PATTERN, $authToken)) {\n            \/\/ Note that the provided token is deliberately not included in the exception\n            \/\/ message to prevent possible leaks of strings that are very-near to a real token.\n            throw new InvalidArgumentException('Invalid authentication token.');\n        }\n\n        $this->authToken = strtolower($authToken);\n    }\n\n    \/**\n     * Publish enqueued content.\n     *\n     * @param boolean $commit\n     *\n     * @return boolean True if there were changes published; otherwise false.\n     *\/\n    protected function doPublish($commit)\n    {\n        $this->typeCheck->doPublish(func_get_args());\n\n        if (null === $this->repository) {\n            throw new RuntimeException('No repository set.');\n        }\n\n        $tempDir = $this->isolator->sys_get_temp_dir() . '\/woodhouse-' . $this->isolator->getmypid();\n\n        try {\n            $this->cloneRepo($tempDir);\n            $this->stageContent($tempDir);\n\n            \/\/ Check if there are any changes ...\n            $process = $this->git->diff(true);\n            if (trim($process->getOutput()) === '') {\n                return false;\n            }\n\n            if ($commit) {\n                $this->git->setConfig('user.name', 'Woodhouse');\n                $this->git->setConfig('user.email', 'contact@icecave.com.au');\n                $this->git->commit($this->commitMessage());\n\n                $this->push();\n            }\n\n            $this->fileSystem->remove($tempDir);\n\n            return true;\n\n        } catch (Exception $e) {\n            $this->fileSystem->remove($tempDir);\n            throw $e;\n        }\n    }\n\n     \/**\n      * @param string $tempDir\n      *\/\n    protected function cloneRepo($tempDir)\n    {\n         $this->typeCheck->cloneRepo(func_get_args());\n\n         try {\n             $this->git->cloneRepo($tempDir, $this->repositoryUrl(), $this->branch(), 0);\n             foreach ($this->contentPaths() as $sourcePath => $targetPath) {\n                 $this->git->remove($targetPath);\n             }\n         } catch (RuntimeException $e) {\n             if (false === strpos($e->getMessage(), $this->branch() . ' not found in upstream origin')) {\n                 throw $e;\n             }\n\n             $this->git->cloneRepo($tempDir, $this->repositoryUrl(), null, 0);\n             $this->git->checkout($this->branch(), true);\n             $this->git->remove('.');\n         }\n    }\n\n     \/**\n      * @param string $tempDir\n      *\/\n     protected function stageContent($tempDir)\n     {\n         $this->typeCheck->stageContent(func_get_args());\n\n         $this->isolator->chdir($tempDir);\n\n         foreach ($this->contentPaths() as $sourcePath => $targetPath) {\n             $fullTargetPath = $tempDir . '\/' . $targetPath;\n             $fullTargetParentPath = dirname($fullTargetPath);\n\n             if (!$this->isolator->is_dir($fullTargetParentPath)) {\n                 $this->isolator->mkdir($fullTargetParentPath, 0777, true);\n             }\n\n             if ($this->isolator->is_dir($sourcePath)) {\n                 $sourcePath = rtrim($sourcePath, '\/') . '\/';\n                 $this->fileSystem->mirror($sourcePath, $fullTargetPath);\n             } else {\n                 $this->fileSystem->copy($sourcePath, $fullTargetPath);\n             }\n\n             $this->git->add($targetPath);\n         }\n     }\n\n     \/**\n      * @return Process\n      *\/\n     protected function push()\n     {\n         $this->typeCheck->push(func_get_args());\n\n         \/\/ Supress exceptions for $max-1 attempts ...\n         $attemptsRemaining = $this->maxPushAttempts;\n\n         while (--$attemptsRemaining) {\n             try {\n                 return $this->git->push('origin', $this->branch());\n             } catch (RuntimeException $e) {\n                 $this->git->pull();\n             }\n         }\n\n         \/\/ Final attempt, allow exceptions to propagate ...\n         return $this->git->push('origin', $this->branch());\n     }\n\n    private $typeCheck;\n    private $git;\n    private $repository;\n    private $branch;\n    private $commitMessage;\n    private $authToken;\n    private $maxPushAttempts;\n    private $fileSystem;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23,null,23,1,1,null,23,1,1,null,23,23,23,23,23,23,null,null,23,null,1,1,null,1,23,null,23,null,23,23,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,8,null,8,null,null,null,null,null,null,null,null,null,2,null,2,null,null,null,null,null,null,null,3,null,3,null,null,null,null,null,null,null,12,null,12,1,null,null,11,11,null,null,null,null,null,null,10,null,10,1,10,2,null,9,null,null,null,null,null,null,null,null,11,null,11,null,null,null,null,null,null,null,9,null,9,9,null,null,null,null,null,null,7,null,7,null,null,null,null,null,null,null,9,null,9,9,null,null,null,null,null,null,3,null,3,null,null,null,null,null,null,null,null,12,null,12,null,null,1,null,null,11,11,null,null,null,null,null,null,null,null,null,null,10,null,10,1,null,null,9,null,null,9,8,null,null,8,8,2,null,null,6,5,5,5,null,5,4,null,5,null,5,null,2,2,2,null,null,null,null,null,null,null,null,9,null,null,9,7,7,7,9,2,1,null,null,1,1,1,null,8,null,null,null,null,null,null,8,null,8,null,8,8,8,null,8,8,8,null,8,5,5,5,8,null,null,8,8,8,null,null,null,null,null,null,5,null,null,5,null,5,null,5,5,5,null,5,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Icecave\/Woodhouse\/Publisher\/PublisherInterface.php","source":"<?php\nnamespace Icecave\\Woodhouse\\Publisher;\n\ninterface PublisherInterface\n{\n    \/**\n     * Enqueue content to be published.\n     *\n     * @param string $sourcePath\n     * @param string $targetPath\n     *\/\n    public function add($sourcePath, $targetPath);\n\n    \/**\n     * Remove enqueued content at $sourcePath.\n     *\n     * @param string $sourcePath\n     *\/\n    public function remove($sourcePath);\n\n    \/**\n     * Clear all enqueued content.\n     *\/\n    public function clear();\n\n    \/**\n     * Publish enqueued content.\n     *\/\n    public function publish();\n\n    \/**\n     * Perform a publication dry-run.\n     *\/\n    public function dryRun();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}